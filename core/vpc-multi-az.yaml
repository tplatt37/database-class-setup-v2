---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'database-class-setup : VPC - with Private and Public subnets, 2 AZs by default, but 3 AZs is an option via UseThirdAZ parameter.'

#
# Run like this, if you want 2 AZs
# aws cloudformation deploy --template-file vpc-multi-az.yaml --stack-name "database-vpc"
#
# Run like this, if you want 3 AZs
# aws cloudformation deploy --template-file vpc-multi-az.yaml --parameter-overrides UseThirdAZ=True --stack-name "database-vpc"
#
# Run like this if you want 3 AZs and NAT Gateways in each (which will cost per hour)
# NAT Gateways are optional. Enable using UseNATGateway=True
# aws cloudformation deploy --template-file vpc-multi-az.yaml --parameter-overrides UseThirdAZ=True UseNATGateway=True --stack-name "database-vpc"


Parameters:

  Prefix:
    Type: String
    Default: database
    Description: "A Prefix to use on the resource names and exports (To ensure uniqueness)."

  VpcBlock:
    Type: String
    Default: 192.168.240.0/20
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  PublicSubnet01Block:
    Type: String
    Default: 192.168.240.0/24
    Description: CidrBlock for public subnet 01 within the VPC

  PublicSubnet02Block:
    Type: String
    Default: 192.168.241.0/24
    Description: CidrBlock for public subnet 02 within the VPC

  PublicSubnet03Block:
    Type: String
    Default: 192.168.242.0/24
    Description: CidrBlock for public subnet 03 within the VPC

  PrivateSubnet01Block:
    Type: String
    Default: 192.168.243.0/24
    Description: CidrBlock for private subnet 01 within the VPC

  PrivateSubnet02Block:
    Type: String
    Default: 192.168.244.0/24
    Description: CidrBlock for private subnet 02 within the VPC

  PrivateSubnet03Block:
    Type: String
    Default: 192.168.245.0/24
    Description: CidrBlock for private subnet 03 within the VPC
    
  UseThirdAZ:
    Type: String
    Default: "False"
    AllowedValues: ["True","False"]
    Description: "Set to True to use 3 AZs.  Note that this will require an additional EIP for the NATGW."

  #
  # You should leave this as default of True
  # The CodeBuild project must have access to S3, SecretsManager, Cloudwatch (logs), CodeBuild,etc.
  # And *May not* support VPC interface endpoints
  # I decided it was easier to just always use NATGateway 
  # Once you create all those endpoints, the cost overhead per hour will be similar
  #
  UseNATGateway:
    Type: String
    Default: "True"
    AllowedValues: ["True", "False"]
    Description: "Set to true to have NAT Gateways created for private subnets. This increases cost."

# Using a Third AZ is optional. You'll need 3 available EIP to setup a 3 AZ VPC...
Conditions:
  CreateThirdAZ: !Equals 
    - !Ref UseThirdAZ
    - "True"
  CreateNATGateway: !Equals
    - !Ref UseNATGateway
    - "True"
  NoNATGateway: !Equals
    - !Ref UseNATGateway
    - "False"
  CreateThirdAZAndCreateNATGateway: !And
  - !Condition CreateThirdAZ
  - !Condition CreateNATGateway

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Network Configuration"
          # This dictates how the parameters are listed (order) in CFN console
        Parameters:
          - VpcBlock
          - UseThirdAZ
          - UseNATGateway
          - PublicSubnet01Block
          - PublicSubnet02Block
          - PublicSubnet03Block
          - PrivateSubnet01Block
          - PrivateSubnet02Block
          - PrivateSubnet03Block

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC'

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public

  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ1
      - Key: Network
        Value: Private01

  PrivateRouteTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ2
      - Key: Network
        Value: Private02

  PrivateRouteTable03:
    Type: AWS::EC2::RouteTable
    Condition: CreateThirdAZ
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ3
      - Key: Network
        Value: Private03

  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  #
  # We only need these routes if we are using NAT Gateways, otherwise default is fine.
  # 
  PrivateRoute01WithNAT:
    Type: AWS::EC2::Route
    Condition: CreateNATGateway
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway01
    Properties:
      RouteTableId: !Ref PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01

  PrivateRoute02:
    Type: AWS::EC2::Route
    Condition: CreateNATGateway
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway02
    Properties:
      RouteTableId: !Ref PrivateRouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway02

  PrivateRoute03:
    Type: AWS::EC2::Route
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway03
    Condition: CreateThirdAZAndCreateNATGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable03
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway03

  NatGateway01:
    Condition: CreateNATGateway
    DependsOn:
    - NatGatewayEIP1
    - PublicSubnet01
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP1.AllocationId'
      SubnetId: !Ref PublicSubnet01
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NatGatewayAZ1'

  NatGateway02:
    Condition: CreateNATGateway
    DependsOn:
    - NatGatewayEIP2
    - PublicSubnet02
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP2.AllocationId'
      SubnetId: !Ref PublicSubnet02
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NatGatewayAZ2'

  NatGateway03:
    DependsOn:
    - NatGatewayEIP3
    - PublicSubnet03
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Condition: CreateThirdAZAndCreateNATGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP3.AllocationId'
      SubnetId: !Ref PublicSubnet03
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NatGatewayAZ3'

  NatGatewayEIP1:
    Condition: CreateNATGateway
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatGatewayEIP2:
    Condition: CreateNATGateway
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatGatewayEIP3:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Condition: CreateThirdAZAndCreateNATGateway
    Properties:
      Domain: vpc

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnet01"

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnet02"

  PublicSubnet03:
    Type: AWS::EC2::Subnet
    Condition: CreateThirdAZ
    Metadata:
      Comment: Subnet 03
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet03Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnet03"
 
  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet01"
 
  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet02"
 
  PrivateSubnet03:
    Type: AWS::EC2::Subnet
    Condition: CreateThirdAZ
    Metadata:
      Comment: Private Subnet 03
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet03Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet03"

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateThirdAZ
    Properties:
      SubnetId: !Ref PublicSubnet03
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateNATGateway
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable01

  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateNATGateway
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable02

  PrivateSubnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateThirdAZAndCreateNATGateway
    Properties:
      SubnetId: !Ref PrivateSubnet03
      RouteTableId: !Ref PrivateRouteTable03

  # Neptune:
  # ALWAYS Required for Neptune to be able to load data from S3 (even with NAT Gateway)
  # As per: https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load.html
  
  VPCS3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    # An S3 Gateway Endpoint
    Properties:
      # This is a GATEWAY endpoint
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTable01
        - !Ref PrivateRouteTable02
        - !If [CreateThirdAZ, !Ref PrivateRouteTable03, !Ref AWS::NoValue]
          
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPC

  DBSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DB Security Group for all databases
      VpcId: !Ref VPC
      
  # Make it so anything in this security group can access the DB servers.
  DBInboundRule1:
    Type: AWS::EC2::SecurityGroupIngress
    # For MySQL 
    Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      GroupId:
        Fn::GetAtt:
        - DBSecurityGroup
        - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
        - DBSecurityGroup
        - GroupId

  DBInboundRule2:
    Type: AWS::EC2::SecurityGroupIngress
    # For Postgresql
    Properties:
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      GroupId:
        Fn::GetAtt:
        - DBSecurityGroup
        - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
        - DBSecurityGroup
        - GroupId
        
  DBInboundRule3:
    Type: AWS::EC2::SecurityGroupIngress
    # For DocumentDB
    Properties:
      IpProtocol: tcp
      FromPort: 27017
      ToPort: 27017
      GroupId:
        Fn::GetAtt:
        - DBSecurityGroup
        - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
        - DBSecurityGroup
        - GroupId

  DBInboundRule4:
    Type: AWS::EC2::SecurityGroupIngress
    # For Neptune
    Properties:
      IpProtocol: tcp
      FromPort: 8182
      ToPort: 8182
      GroupId:
        Fn::GetAtt:
        - DBSecurityGroup
        - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
        - DBSecurityGroup
        - GroupId

  DBInboundRule5:
    Type: AWS::EC2::SecurityGroupIngress
    # For Redshift
    Properties:
      IpProtocol: tcp
      FromPort: 5439
      ToPort: 5439
      GroupId:
        Fn::GetAtt:
        - DBSecurityGroup
        - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
        - DBSecurityGroup
        - GroupId

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "DB Subnet Group"
      SubnetIds:
        - !Ref PrivateSubnet01
        - !Ref PrivateSubnet02
        - !If [CreateThirdAZ, !Ref PrivateSubnet03, !Ref AWS::NoValue]
          

Outputs:

  PublicSubnetIds:
    Description: PUBLIC Subnets IDs in the VPC
    Value: !Join [ ",", [ !Ref PublicSubnet01, !Ref PublicSubnet02, !If [ CreateThirdAZ, !Ref PublicSubnet03, !Ref AWS::NoValue ] ] ]
    Export:
      Name: !Join ["-", [ !Ref Prefix, "PublicSubnetIds"]]

  PrivateSubnetIds:
    Description: PRIVATE Subnets IDs in the VPC
    Value: !Join [ ",", [ !Ref PrivateSubnet01, !Ref PrivateSubnet02, !If [CreateThirdAZ, !Ref PrivateSubnet03 , !Ref AWS::NoValue ] ] ]
    Export:
      Name: !Join ["-", [ !Ref Prefix, "PrivateSubnetIds"]]

  PrivateSubnet1:
    Description: Private Subnet1 ID in the VPC
    Value: !Ref PrivateSubnet01
    Export:
      Name: !Join ["-", [ !Ref Prefix, "PrivateSubnet01"]]
    
  PrivateSubnet2:
    Description: Private Subnet2 ID in the VPC
    Value: !Ref PrivateSubnet02
    Export:
      Name: !Join ["-", [ !Ref Prefix, "PrivateSubnet02"]]

  PrivateSubnet3:
    Description: Private Subnet3 ID in the VPC
    Value: !Ref PrivateSubnet03
    Condition: CreateThirdAZ
    Export:
      Name: !Join ["-", [ !Ref Prefix, "PrivateSubnet03"]]

  DBSecurityGroup:
    Description: Security group for the databases.
    Value: !Join [ ",", [ !Ref DBSecurityGroup ] ]
    Export:
      Name: !Join ["-", [ !Ref Prefix, "DBSecurityGroup"]]
      
  DBSubnetGroup:
    Description: "DB Subnet group containing all the private subnets."
    Value: !Ref DBSubnetGroup
    Export:
      Name: !Join ["-", [!Ref Prefix, "DBSubnetGroup"]]
      
  VpcId:
    Description: The VPC Id
    Value: !Ref VPC
    Export:
      Name: !Join ["-", [ !Ref Prefix, "VpcId"]]